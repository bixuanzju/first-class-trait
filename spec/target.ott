
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METAVARIABLES

metavar var, x , y ::= {{ repr-locally-nameless }}

metavar i, l ::= {{ coq nat }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR (LNgen portion)

grammar


% Target language

typ, T {{ tex \tau }} :: 'a_' ::= {{ com target types }}
  | nat        ::   :: nat   {{ com nat }}
  | Unit  ::  :: unit {{ com unit }}
  | T1 -> T2    ::   :: arrow  {{ com function types }}
  | T1 * T2 :: :: prod {{ com product }}
  | { l : T } :: :: rcd {{ com record }}
  | ( T )          :: S :: paren {{ coq [[T]] }}
  | | A |          :: S :: trans {{ coq 0 }}
  | char :: S :: char {{ coq 0 }}

exp, e, v :: 'trm_'     ::= {{ com target expressions }}
  | x              ::   :: var {{ com variables }}
  | unit         :: :: unit   {{ com unit }}
  | i        :: :: lit   {{ com lit }}
  | \ x . e        ::   :: abs
    (+ bind x in e +)
    {{ com abstractions }}
	 {{ tex [[\]][[x]].\,[[e]] }}
  | e1 e2          ::   :: app {{ com applications }}
  | < e1 , e2 >   :: :: pair  {{ com pair }}
  | { l = e }  ::  :: rcd    {{ com record }}
  | e . l  ::  :: proj    {{ com projection }}
  | c e    :: :: capp   {{ com coApp }}
  | e1 [ x ~> e2 ] :: M :: subst
     {{ coq (open_exp_wrt_exp [[x e1]][[e2]]) }}
  | ( e )          :: S :: paren {{ coq ([[e]]) }}
  | cc { e }                ::   S :: appctx {{ coq 0 }}

co, c :: 'co_' ::=   {{ com coercion }}
  | id  :: :: id   {{ com id }}
  | c1 o c2 :: :: trans {{ tex [[c1]] \circ [[c2]] }}
  | top :: :: top  {{ com top }}
  | c1 -> c2 :: :: arr {{ com arr }}
  | < c1 , c2 > :: :: pair {{ com pair }}
  | p1  :: :: proj1 {{ com proj1 }}
  | p2  :: :: proj2 {{ com proj2 }}
  | distArr :: :: distArr
  | distRcd l :: :: distRcd {{ tex \mathsf{dist}_{ \{ [[l]] \} } }}
  | { l : c } :: :: rcd
  | topArr :: :: topArr
  | < l > :: :: topRcd {{ tex \mathsf{top}_{ \{ [[l]] \} } }}
  | ( c ) :: S :: paren {{ coq ([[c]]) }}
  | < fs >1 :: M :: Tran1 {{ coq (calTop [[fs]]) }} {{ tex \llbracket [[fs]] \rrbracket_{\top} }}
  | < fs >2 :: M :: Tran2 {{ coq (calAnd [[fs]]) }} {{ tex \llbracket [[fs]] \rrbracket_{\&} }}



substitutions
  single exp x   :: subst


freevars
  exp x      :: fv

parsing
  a_arrow <= a_prod
  a_arrow right a_arrow

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR  (non LNgen portion)

grammar

ctx, G {{ tex \Delta }} :: 'ctx_'     ::= {{ com target typing context }} {{ coq list ( atom * typ ) }}
  | empty          ::   :: Empty {{ coq nil }}
                                 {{ tex \bullet }}
                                 {{ com empty context }}
  | G , x : T      ::   :: Cons  {{ coq (([[x]]~[[T]])++[[G]]) }}
                                 {{ com assumption }}
  | | GG | :: S :: Trans {{ coq 0 }}


cc {{ tex C }} :: 'cc_' ::= {{ com target context }}
  | __ :: :: Empty
  | \ x . cc ::  :: Lam
	{{ tex [[\]][[x]].\,[[cc]] }}
  | cc e :: :: AppL
  | e cc :: :: AppR
  | < cc , e > :: :: PairL
  | < e , cc > :: :: PairR
  | c cc :: :: Co
  | { l = cc } :: :: Rcd
  | cc . l :: :: Proj
  | ( cc ) :: S :: Paren {{ coq [[cc]] }}


terminals :: 'terminals_' ::=
    | \                   ::   :: lambda     {{ tex \lambda }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    | -->>     ::  :: red2    {{ tex \longrightarrow^{*} }}
    | ->                 ::   :: arrow      {{ tex \rightarrow }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | p1      ::  :: proj1 {{ tex \pi_1 }}
    | p2      ::  :: proj2 {{ tex \pi_2 }}
    | <       ::  :: lbr  {{ tex \langle }}
    | >       ::  :: rbr  {{ tex \rangle }}
    | >1       ::  :: rbr1  {{ tex \rangle_1 }}
    | >2       ::  :: rbr2  {{ tex \rangle_2 }}
    | *       :: :: prod {{ tex \times }}
    | dot     ::  :: dot  {{ tex [ \cdot ] }}
    | empty   ::  :: empty {{ tex \bullet }}
    | |-      ::  :: dash  {{ tex \vdash }}
    | elt      ::  :: elt       {{ tex \in }}
    | tri      ::  :: tri       {{ tex \triangleright }}
    | id       ::  :: id  {{ tex \mathsf{id} }}
    | Top       ::  :: Top  {{ tex \top }}
    | nat       ::  :: nat  {{ tex \mathsf{Nat} }}
    | char       ::  :: char  {{ tex \mathsf{Char} }}
    | ,,         :: :: Merge  {{ tex \,,,\, }}
    | unit   :: :: unit  {{ tex \langle \rangle }}
    | Unit   :: :: Unit  {{ tex \langle \rangle }}
    | top   :: :: top  {{ tex \mathsf{top} }}
    | topArr   :: :: topArr  {{ tex \mathsf{top}_{\rightarrow} }}
    | distArr   :: :: distArr  {{ tex \mathsf{dist}_{\rightarrow} }}
    | &         :: :: And  {{ tex \, \& \, }}
    | =>        :: :: Infer  {{ tex \Rightarrow }}
    | <=        :: :: Chk  {{ tex \Leftarrow }}
    | <=>1       :: :: DD1 {{ tex \Leftrightarrow_1 }}
    | <=>2       :: :: DD2 {{ tex \Leftrightarrow_2 }}
    | <=>       :: :: DD3 {{ tex \Leftrightarrow }}
    | **        :: :: Dis  {{ tex * }}
    | ~~>        :: :: leads  {{ tex \rightsquigarrow }}
    | in      ::  :: in       {{ tex \in }}
    | ~>      ::  :: to       {{ tex \mapsto  }}
    | __           ::  :: hole    {{ tex [\cdot] }}
    | |>           ::  :: split    {{ tex \models }}


formula :: 'formula_' ::=
  | judgement                ::   :: judgement
  | uniq G                   ::   :: uniqG
    {{ coq uniq [[G]] }}
	  {{ tex }}
  | uniq GG                   ::   :: uniqGG
    {{ coq uniq [[GG]] }}
	 {{ tex }}
  | x : T in G               ::   :: inG
    {{ coq binds [[x]][[T]][[G]] }}
  | x : A in GG               ::   :: inGG
    {{ coq binds [[x]][[A]][[GG]] }}
  | x notin fv e             ::   :: fresh
    {{ coq [[x]] \notin fv[[e]] }}
  | x notin dom G            ::   :: notInGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[G]]) }}
    {{ tex [[x]] \notin [[G]] }}
  | x notin dom GG            ::   :: notInGGx
    {{ coq ~ AtomSetImpl.In [[x]] (dom [[GG]]) }}
    {{ tex [[x]] \notin [[GG]] }}
  | e -->> e'       :: :: multi_step
  | l1 <> l2 :: :: label {{ coq [[l1]] <> [[l2]] }} {{ tex [[l1]] \neq [[l2]] }}
  | A <: B  :: :: sub
  | GG  |- ee dirflag A :: :: inferChk
  | GG |- A :: :: well
  | G |- T :: :: well2
  | cc : ( G |- T ) ~~> ( G' |- T' ) :: :: ctxt
  | G1 ; G2 |- e1 == e2 : T1 ; T2 :: :: logeq {{ tex [[G1]] ; [[G2]] [[|-]] \logeq{[[e1]]}{[[e2]]} : [[T1]] ; [[T2]] }}
  | G |- e1 == e2 : T :: :: logeq2 {{ tex [[G]] [[|-]] \logeq{[[e1]]}{[[e2]]} : [[T]] }}
  | G |- e1 ~= e2 : T :: :: cxtx {{ tex [[G]] [[|-]] \ctxeq{[[e1]]}{[[e2]]}{[[T]]} }}
  | GG |- ee1 ~= ee2 : A :: :: cxtx2 {{ tex [[GG]] [[|-]] \ctxeq{[[ee1]]}{[[ee2]]}{[[A]]} }}
  | ( v1 , v2 ) in V ( T1 ; T2 ) :: :: value {{ tex ( [[v1]] , [[v2]] ) \in \valR{[[T1]]}{[[T2]]} }}
  | ( e1 , e2 ) in E ( T1 ; T2 ) :: :: term {{ tex ( [[e1]] , [[e2]] ) \in \eeR{[[T1]]}{[[T2]]} }}
  | fs |- A <: B :: :: algo {{ tex [[fs]] [[|-]] [[A]] \prec : [[B]] }}
  | GG |- ee1 <=>1 A ~~> e1 :: :: DD1
  | GG |- ee1 <=> A ~~> e1 :: :: DD
  | C : ( GG <=>1 A ) ~> ( GG' <=>2 A' ) ~~> cc :: :: CC




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Target

defns

JCoTyping :: '' ::=

defn c |- T1 tri T2 ::  :: cotyp :: 'cotyp_' {{ com Coercion typing }} by


----------------------- :: refl
id |- T tri T



c1 |- T2 tri T3
c2 |- T1 tri T2
--------------------- :: trans
c1 o c2 |- T1 tri T3



---------------------  :: top
top |- T tri Unit



------------------------------  :: topArr
topArr |- Unit tri Unit -> Unit



c1 |- T1' tri T1
c2 |- T2 tri T2'
------------------------------------- :: arr
c1 -> c2 |- T1 -> T2 tri T1' -> T2'


c1 |- T1 tri T2
c2 |- T1 tri T3
----------------------------- :: pair
<c1, c2> |- T1 tri T2 * T3



-------------------------------------------------- :: distArr
distArr |- (T1 -> T2) * (T1 -> T3) tri T1 -> T2 * T3



--------------------- :: projl
p1 |- T1 * T2 tri T1



--------------------- :: projr
p2 |- T1 * T2 tri T2



c |- T1 tri T2
--------------------------------- :: rcd
{l : c} |- {l : T1} tri {l : T2}


----------------------------- :: topRcd
< l > |- Unit tri { l : Unit }



---------------------------------------------- :: distRcd
distRcd l |- {l : T1} * {l : T2} tri {l : T1 * T2}



defns

JTyping :: '' ::=


defn
G |- e : T ::   :: typing :: 'typ_'
{{ com Typing rules }}
by


uniq G
----------------- :: unit
G |- unit : Unit


uniq G
----------------- :: lit
G |- i : nat


uniq G
x : T in G
------------ :: var
G |- x : T


G, x:T1 |- e : T2
-------------------------- :: abs
G |- \x. e : T1 -> T2


G |- e1 : T1 -> T2
G |- e2 : T1
------------------ :: app
G |- e1 e2 : T2


G |- e1 : T1
G |- e2 : T2
------------------------------ :: pair
G |- <e1, e2> : T1 * T2



G |- e : T
c |- T tri T'
------------------- :: capp
G |- c e : T'


G |- e : T
---------------------------------- :: rcd
G |- { l = e } : { l : T }


G |- e : { l : T }
---------------------- :: proj
G |- e.l : T



defns

JValue :: '' ::=

defn
value e ::   :: value :: value_ {{ com Values }} {{ tex  }}
by

---------------------- :: unit
value unit


---------------------- :: lit
value i


---------------------- :: abs
value \x . e


value v1
value v2
----------------------- :: pair
value <v1, v2>


value v
----------------------- :: rcd
value {l = v}


value v
------------------------ :: cabs
value (c1 -> c2) v


value v
------------------------ :: cpair
value distArr v


value v
--------------- :: topArr
value topArr v


defns

JEval :: '' ::=

defn
e --> e' :: :: step :: step_ {{ com Operational semantics }} by


value v
-------------------- :: id
id v --> v


value v
---------------------------- :: trans
(c1 o c2) v --> c1 (c2 v)


value v
------------------ :: top
top v --> unit


----------------------- :: topArr
(topArr unit) unit --> unit



value v1
value v2
------------------------------------------- :: arr
((c1 -> c2) v1) v2 --> c2 (v1 (c1 v2))


value v
-------------------------------- :: pair
<c1, c2> v --> <c1 v, c2 v>


value v1
value v2
value v3
------------------------------------------------- :: distArr
(distArr < v1 , v2 >) v3 --> < v1 v3, v2 v3 >


value v1
value v2
---------------------------- :: projl
p1 <v1, v2> --> v1


value v1
value v2
---------------------------- :: projr
p2 <v1, v2> --> v2


value v
-------------------------------- :: crcd
{l : c} {l = v} --> { l = c v }



----------------------------- :: topRcd
< l > unit --> { l = unit }



value v1
value v2
-------------------------------------------- :: distRcd
distRcd l < {l = v1} , {l = v2} > --> {l = <v1 , v2>}



value v
----------------- :: projRcd
{l = v}.l --> v


value v
-------------------------------------  :: beta
(\ x . e) v -->  e [ x ~> v ]


e1 --> e1'
----------------------- :: app1
e1 e2 --> e1' e2

value v1
e2 --> e2'
----------------------- :: app2
v1 e2 --> v1 e2'


e1 --> e1'
----------------------- :: pair1
<e1, e2> --> <e1', e2>


value v1
e2 --> e2'
----------------------- :: pair2
<v1, e2> --> <v1, e2'>


e --> e'
---------------------- :: capp
c e --> c e'


e --> e'
----------------------- :: rcd1
{l = e} --> {l = e'}


e --> e'
----------------------- :: rcd2
e.l --> e'.l
